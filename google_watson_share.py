# -*- coding: utf-8 -*-
"""google_watson_share.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B1ppqfb9VC5dI7y6moGyXcGBKC4kVw67
"""

# bibliotecas auxiliares e importações de suporte
!pip install ibm-watson
#biblioteca para executar api flask no colab
!pip install flask-ngrok

# biblioteca para entrar dados mascarados
from getpass import getpass

# Configuração de acesso ao Watson
api_key = getpass('Watson API Key: ')
url = getpass('Watson URL: ')
a_id = getpass('Assistant ID: ')

from flask import Flask, request, jsonify, make_response
import os
import json
from ibm_watson import AssistantV2
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator

app = Flask(__name__)

# apenas para executar no colab
from flask_ngrok import run_with_ngrok
run_with_ngrok(app)

# autenticar e criar seção com watson
authenticator = IAMAuthenticator(api_key)
assistant = AssistantV2(version='2018-09-20', authenticator=authenticator)
assistant.set_service_url(url)
session = assistant.create_session(a_id).get_result()

# endpoint de comunicação google/watson
@app.route('/', methods=['POST'])
def request_google():
    
    req = request.get_json(silent=True, force=True)
    print(req)
    
    msg = req['inputs'][0]['rawInputs'][0]['query']
    message = assistant.message(
        a_id,
        session['session_id'],
        input={'text': msg},
        context={
            'metadata': {
                'deployment': 'myDeployment'
            }
        }).get_result()
    
    
    print(message)

    # montar textos de resposta para google
    texts = []
    suggestions = []
    for m in message['output']['generic']:
      if m['response_type'] == 'text':
        if m['text']:
          texts.append(m['text'])
      elif m['response_type'] == 'option':
        texts.append(m['title'])
        suggestions = [{"title": o['label']} for o in m['options']]

    r = {
      "expectUserResponse": True,
      "expectedInputs": [
        {
          "possibleIntents": [
            {
              "intent": "actions.intent.TEXT"
            }
          ],
          "inputPrompt": {
            "richInitialPrompt": {
              "items": [
                {
                  "simpleResponse": {
                    "textToSpeech": '\n'.join(texts)
                  }
                }
              ],
                "suggestions": suggestions,
            }
          }
        }
      ]
    }
    print(r)
    return make_response(jsonify(r))
	  

if __name__ == '__main__':
	
    app.run()

"""# Nova seção"""



